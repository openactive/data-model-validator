const { RRule } = require('rrule');
const Rule = require('../rule');
const generateRRuleOptions = require('../../helpers/rrule-options');
const getScheduleProperties = require('../../helpers/schedule-properties');
const ValidationErrorType = require('../../errors/validation-error-type');
const ValidationErrorCategory = require('../../errors/validation-error-category');
const ValidationErrorSeverity = require('../../errors/validation-error-severity');

module.exports = class ValidRecurrenceRule extends Rule {
  constructor(options) {
    super(options);
    this.targetModels = ['Schedule'];
    this.meta = {
      name: 'ValidRecurrenceRule',
      description:
        'Validates that the Schedule contains the correct information to generate a valid iCal recurrence rule.',
      tests: {
        matchingFirstEvent: {
          message:
          'The first event that is generated by the `Schedule` ({{firstEvent}}) does not match the `startDate` ({{startDate}}) and `startTime` ({{startTime}}).',
          sampleValues: {
            startTime: '08:30',
            startDate: '2021-03-19',
            firstEvent: '2021-03-20T09:40:00Z',
          },
          category: ValidationErrorCategory.CONFORMANCE,
          severity: ValidationErrorSeverity.FAILURE,
          type: ValidationErrorType.MISSING_REQUIRED_FIELD,
        },
        rruleCreation: {
          message:
          'There was an error generating the RRule from the data provided. Error: {{error}}',
          category: ValidationErrorCategory.CONFORMANCE,
          severity: ValidationErrorSeverity.FAILURE,
          type: ValidationErrorType.MISSING_REQUIRED_FIELD,
        },
        dtStart: {
          message:
            'The recurrence rule must contain a `startDate`, `startTime`, and `scheduledTimezone` to generate the schedule.',
          sampleValues: {
            startTime: '08:30',
            startDate: '2021-03-19',
            scheduleTimezone: 'Europe/London',
          },
          category: ValidationErrorCategory.CONFORMANCE,
          severity: ValidationErrorSeverity.FAILURE,
          type: ValidationErrorType.MISSING_REQUIRED_FIELD,
        },
      },
    };
  }

  validateModel(node) {
    const errors = [];

    const properties = getScheduleProperties(node);
    const rruleOptions = generateRRuleOptions(properties);

    if (typeof properties.startDate === 'undefined'
        || typeof properties.startTime === 'undefined'
        || typeof properties.scheduleTimezone === 'undefined') {
      errors.push(
        this.createError('dtStart', {
          value: undefined,
          path: node,
        }),
      );
    }

    try {
      const rule = new RRule(rruleOptions);
      const firstEvent = rule.all()[0];
      if (firstEvent.getTime() !== rruleOptions.dtstart.getTime()) {
        errors.push(
          this.createError('matchingFirstEvent', {
            startDate: properties.startDate,
            startTime: properties.startTime,
            firstEvent,
            path: node,
          }),
        );
      }
    } catch (error) {
      errors.push(
        this.createError('rruleCreation', {
          error,
          path: node,
        }),
      );
    }

    return errors;
  }
};
