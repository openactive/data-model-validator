const { RRule } = require('rrule');
const Rule = require('../rule');
const getFrequency = require('../../helpers/frequency-converter');
const getDateTime = require('../../helpers/datetime-helper');
const ValidationErrorType = require('../../errors/validation-error-type');
const ValidationErrorCategory = require('../../errors/validation-error-category');
const ValidationErrorSeverity = require('../../errors/validation-error-severity');

module.exports = class ExceptDatesAreInSchedule extends Rule {
  constructor(options) {
    super(options);
    this.targetModels = ['Schedule'];
    this.meta = {
      name: 'ExceptDatesAreInSchedule',
      description:
        'Validates that the Schedule contains exceptDates that are part of the recurrence rule.',
      tests: {
        exDate: {
          message:
            '{{value}} must be one of the events generated by the recurrence rule.',
          sampleValues: {
            startTime: '08:30',
            endTime: '09:30',
            startDate: '2021-03-19',
            repeatFrequency: 'P1W',
            count: 10,
            exceptDates: ['2021-03-26T08:30:00Z'],
            scheduleTimezone: 'Europe/London',
          },
          category: ValidationErrorCategory.CONFORMANCE,
          severity: ValidationErrorSeverity.WARNING,
          type: ValidationErrorType.MISSING_REQUIRED_FIELD,
        },
      },
    };
  }

  validateModel(node) {
    const errors = [];

    const { freq, interval } = getFrequency(node.getValue('repeatFrequency'));
    const byDay = node.getValue('byDay');
    const byMonth = node.getValue('byMonth');
    const byMonthDay = node.getValue('byMonthDay');
    const startDate = node.getValue('startDate');
    const startTime = node.getValue('startTime');
    const endDate = node.getValue('endDate');
    const endTime = node.getValue('endTime');
    const count = node.getValue('count');
    const scheduleTimezone = node.getValue('scheduleTimezone');
    const exceptDate = node.getValue('exceptDate');

    if (typeof exceptDate === 'undefined') {
      return [];
    }

    const dtStart = getDateTime(startDate, startTime);
    const dtEnd = getDateTime(endDate, endTime);

    const rruleOptions = { freq, interval }; // this is the only required one

    if (typeof dtStart !== 'undefined') {
      rruleOptions.dtstart = dtStart;
    }
    if (typeof byDay !== 'undefined') {
      rruleOptions.byweekday = byDay;
    }
    if (typeof byMonth !== 'undefined') {
      rruleOptions.bymonth = byMonth;
    }
    if (typeof byMonthDay !== 'undefined') {
      rruleOptions.bymonthday = byMonthDay;
    }
    if (typeof dtEnd !== 'undefined') {
      rruleOptions.until = dtEnd;
    }
    if (typeof count !== 'undefined') {
      rruleOptions.count = count;
    }
    if (typeof scheduleTimezone !== 'undefined') {
      rruleOptions.tzid = scheduleTimezone;
    }

    try {
      const rule = new RRule(rruleOptions);
      const allEvents = rule.all();
      const simplifiedAllEvents = allEvents.map(event => event.getTime());
      for (const date of exceptDate) {
        const simplifiedDate = new Date(date).getTime();
        if (!simplifiedAllEvents.includes(simplifiedDate)) {
          errors.push(
            this.createError('exDate', {
              value: date,
              path: node,
            }),
          );
        }
      }
    } catch (error) {
      return [];
    }

    return errors;
  }
};
